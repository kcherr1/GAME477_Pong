//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.5.0
//     from Assets/InputActions/InputActionsPaddles.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActionsPaddles: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActionsPaddles()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActionsPaddles"",
    ""maps"": [
        {
            ""name"": ""Default"",
            ""id"": ""fec934de-31ba-4dfb-87eb-15ddbad3e33f"",
            ""actions"": [
                {
                    ""name"": ""LeftPaddleMove"",
                    ""type"": ""Value"",
                    ""id"": ""ed6cb2da-ebd0-443e-90b6-b8e92c36ff96"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RightPaddleMove"",
                    ""type"": ""Value"",
                    ""id"": ""accd2e31-36fd-437d-8f23-0f7b0a0aa7b9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""72629d74-cbc6-40c7-9929-5b2cf8662997"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPaddleMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""57f9dcab-2214-4267-b8d5-544281853606"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPaddleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""bb320fdb-e27d-4eef-9413-a1a7fb8f1ab4"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LeftPaddleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""4af390b9-8fbe-4204-b589-0a6c892798bf"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPaddleMove"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""bd5bd8a3-071c-4dad-a31e-2a10985d9497"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPaddleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""5831d6ed-1f0b-432c-83f7-5393a3d8b6e8"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""RightPaddleMove"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""New control scheme"",
            ""bindingGroup"": ""New control scheme"",
            ""devices"": []
        }
    ]
}");
        // Default
        m_Default = asset.FindActionMap("Default", throwIfNotFound: true);
        m_Default_LeftPaddleMove = m_Default.FindAction("LeftPaddleMove", throwIfNotFound: true);
        m_Default_RightPaddleMove = m_Default.FindAction("RightPaddleMove", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Default
    private readonly InputActionMap m_Default;
    private List<IDefaultActions> m_DefaultActionsCallbackInterfaces = new List<IDefaultActions>();
    private readonly InputAction m_Default_LeftPaddleMove;
    private readonly InputAction m_Default_RightPaddleMove;
    public struct DefaultActions
    {
        private @InputActionsPaddles m_Wrapper;
        public DefaultActions(@InputActionsPaddles wrapper) { m_Wrapper = wrapper; }
        public InputAction @LeftPaddleMove => m_Wrapper.m_Default_LeftPaddleMove;
        public InputAction @RightPaddleMove => m_Wrapper.m_Default_RightPaddleMove;
        public InputActionMap Get() { return m_Wrapper.m_Default; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(DefaultActions set) { return set.Get(); }
        public void AddCallbacks(IDefaultActions instance)
        {
            if (instance == null || m_Wrapper.m_DefaultActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Add(instance);
            @LeftPaddleMove.started += instance.OnLeftPaddleMove;
            @LeftPaddleMove.performed += instance.OnLeftPaddleMove;
            @LeftPaddleMove.canceled += instance.OnLeftPaddleMove;
            @RightPaddleMove.started += instance.OnRightPaddleMove;
            @RightPaddleMove.performed += instance.OnRightPaddleMove;
            @RightPaddleMove.canceled += instance.OnRightPaddleMove;
        }

        private void UnregisterCallbacks(IDefaultActions instance)
        {
            @LeftPaddleMove.started -= instance.OnLeftPaddleMove;
            @LeftPaddleMove.performed -= instance.OnLeftPaddleMove;
            @LeftPaddleMove.canceled -= instance.OnLeftPaddleMove;
            @RightPaddleMove.started -= instance.OnRightPaddleMove;
            @RightPaddleMove.performed -= instance.OnRightPaddleMove;
            @RightPaddleMove.canceled -= instance.OnRightPaddleMove;
        }

        public void RemoveCallbacks(IDefaultActions instance)
        {
            if (m_Wrapper.m_DefaultActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IDefaultActions instance)
        {
            foreach (var item in m_Wrapper.m_DefaultActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_DefaultActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public DefaultActions @Default => new DefaultActions(this);
    private int m_NewcontrolschemeSchemeIndex = -1;
    public InputControlScheme NewcontrolschemeScheme
    {
        get
        {
            if (m_NewcontrolschemeSchemeIndex == -1) m_NewcontrolschemeSchemeIndex = asset.FindControlSchemeIndex("New control scheme");
            return asset.controlSchemes[m_NewcontrolschemeSchemeIndex];
        }
    }
    public interface IDefaultActions
    {
        void OnLeftPaddleMove(InputAction.CallbackContext context);
        void OnRightPaddleMove(InputAction.CallbackContext context);
    }
}
